generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Beat {
  id          Int     @id @default(autoincrement())
  id_video    String  @unique
  searchTitle String
  image_url   String
  video_url   String
  title       String  @unique
  tag         String
  bpm         String
  duration    String
  scale       String
  sold        Boolean @default(false)
  beatId      String  @unique @default(cuid())
}

model Tag {
  id      Int    @id @default(autoincrement())
  tagName String @unique
}

model Price {
  id          Int    @id @default(autoincrement())
  licenseType String @unique
  price       Float
}

model File {
  id              Int    @id @default(autoincrement())
  baseFileUrl     String
  editableFileUrl String
  beatId          String @unique
}
